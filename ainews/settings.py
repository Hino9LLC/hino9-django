"""
Django settings for ainews project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import socket
import sys
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes")

# Parse ALLOWED_HOSTS from comma-separated string
ALLOWED_HOSTS: list[str] = [
    host.strip() for host in os.getenv("ALLOWED_HOSTS", "").split(",") if host.strip()
]

# Always allow localhost and 127.0.0.1 for Docker health checks
if "localhost" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("localhost")
if "127.0.0.1" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("127.0.0.1")

# Add container hostname and Docker service name for Prometheus scraping
# (internal container-to-container communication)
container_hostname = socket.gethostname()
if container_hostname not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(container_hostname)
# Also allow Docker service name (h9-django)
if "h9-django" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("h9-django")


# Application definition

INSTALLED_APPS = [
    "django_prometheus",  # Prometheus metrics - must be first
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "tailwind",
    "theme",
    "django_ratelimit",
    "news",  # News app
]

# Add django-browser-reload only in DEBUG mode (not needed with Gunicorn)
if DEBUG:
    INSTALLED_APPS.insert(INSTALLED_APPS.index("theme") + 1, "django_browser_reload")

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",  # Prometheus - must be FIRST
    "news.middleware.DatabaseRetryMiddleware",  # Database resilience
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Serve static files with Gunicorn
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",  # Prometheus - must be LAST
]

# Add browser reload middleware only in DEBUG mode
if DEBUG:
    MIDDLEWARE.insert(4, "django_browser_reload.middleware.BrowserReloadMiddleware")

# Remove XFrameOptionsMiddleware in production (nginx handles it)
if not DEBUG:
    MIDDLEWARE.remove("django.middleware.clickjacking.XFrameOptionsMiddleware")

ROOT_URLCONF = "ainews.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "ainews.context_processors.google_analytics",
            ],
        },
    },
]

WSGI_APPLICATION = "ainews.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL configuration
# Support both POSTGRES_APP_* (production) and POSTGRES_* (local dev) naming
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_APP_DB") or os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_APP_USER") or os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_APP_PASSWORD")
        or os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_APP_SERVICE") or os.getenv("POSTGRES_SERVICE"),
        "PORT": os.getenv("POSTGRES_APP_PORT") or os.getenv("POSTGRES_PORT", "5432"),
        # Connection pooling - reuse connections for up to 10 minutes
        "CONN_MAX_AGE": 600,
        # Connection health checks - verify connection is alive before using
        "CONN_HEALTH_CHECKS": True,
        # Connection timeout (5 seconds)
        "OPTIONS": {
            "connect_timeout": 5,
        },
    }
}

# Test database configuration
# Use PostgreSQL for tests if TEST_WITH_POSTGRES env var is set, otherwise SQLite
if "test" in sys.argv:
    if os.getenv("TEST_WITH_POSTGRES"):
        # PostgreSQL test database (used by test_with_postgres.sh)
        DATABASES["default"] = {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB", "test_ainews"),
            "USER": os.getenv("POSTGRES_USER", "postgres"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
            "HOST": os.getenv("POSTGRES_HOST", "localhost"),
            "PORT": os.getenv("POSTGRES_PORT", "54320"),
        }
    else:
        # SQLite in-memory database (default for quick tests)
        DATABASES["default"] = {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    # Disable rate limiting during tests
    RATELIMIT_ENABLE = False
    # Use dummy cache during tests (disables all caching)
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }  # type: ignore[var-annotated]
    # Silence django-ratelimit warnings for DummyCache
    SILENCED_SYSTEM_CHECKS = ["django_ratelimit.E003", "django_ratelimit.W001"]


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "theme" / "static_src",
]

# Tailwind settings
TAILWIND_APP_NAME = "theme"

# WhiteNoise settings
WHITENOISE_COMPRESS = True  # Enable Brotli/Gzip compression for static files

# Security settings for production (when behind Nginx proxy)
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    CSRF_TRUSTED_ORIGINS = [f"https://{host}" for host in ALLOWED_HOSTS if host]
    # Trust proxy for real client IP (for rate limiting and logging)
    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True
    USE_X_FORWARDED_FOR = True

    # Disable Django's security headers since nginx handles them at edge
    # This prevents duplicate headers (nginx sets all security headers)
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Cache configuration
# Cache TTL: Set to 7 days (604800 seconds)
# This is intentionally long because data only changes when database is replaced.
# After database replacement, flush_cache command clears all cached data.
# Between replacements, all data is static (read-only), so we maximize cache hits.
CACHE_TTL = 60 * 60 * 24 * 7  # 7 days in seconds

# Cache versioning for instant invalidation
# Increment this version to invalidate all caches without flushing Redis
# The flush_cache command automatically increments this
CACHE_VERSION = 1

# Prometheus configuration
PROMETHEUS_EXPORT_MIGRATIONS = False  # Don't clutter metrics with migration data

# Cache backend for rate limiting and view caching
# Use django-redis with resilience if REDIS_HOST is configured, otherwise fall back to local memory
# Skip cache configuration if running tests (DummyCache is configured in test block)
REDIS_HOST = os.getenv("REDIS_HOST")
if "test" not in sys.argv and DEBUG:
    # Disable caching in DEBUG mode to avoid stale template issues during development
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }
    # Silence django-ratelimit warnings for DummyCache
    SILENCED_SYSTEM_CHECKS = ["django_ratelimit.E003", "django_ratelimit.W001"]
elif "test" not in sys.argv and REDIS_HOST:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f"redis://{REDIS_HOST}:{os.getenv('REDIS_PORT', '6379')}/0",
            "OPTIONS": {  # type: ignore[dict-item]
                # Connection pool settings
                "CONNECTION_POOL_KWARGS": {
                    "max_connections": 50,
                    "retry_on_timeout": True,
                },
                # Resilience: Don't crash the site if Redis is down
                "IGNORE_EXCEPTIONS": True,  # Fail gracefully (no caching instead of crashing)
                "LOG_IGNORED_EXCEPTIONS": True,  # Log Redis failures for monitoring
                # Connection settings
                "SOCKET_CONNECT_TIMEOUT": 5,  # 5 seconds
                "SOCKET_TIMEOUT": 5,  # 5 seconds
            },
            "KEY_PREFIX": "ainews",
            "VERSION": CACHE_VERSION,  # type: ignore[dict-item]
        }
    }
    # Silence django-ratelimit warnings for Redis (it works fine despite the warning)
    SILENCED_SYSTEM_CHECKS = ["django_ratelimit.W001"]
elif "test" not in sys.argv:
    # Local memory cache for development (single-worker only)
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "ratelimit-cache",
            "KEY_PREFIX": "ainews",
            "VERSION": CACHE_VERSION,  # type: ignore[dict-item]
        }
    }
    # Silence django-ratelimit cache warnings for local dev
    SILENCED_SYSTEM_CHECKS = ["django_ratelimit.E003", "django_ratelimit.W001"]

# Pagination configuration
PAGINATION_PAGE_SIZE = 10  # Number of items per page for news listings

# Rate limiting configuration
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = "default"
SEARCH_RATE_LIMIT = "100/h"  # Rate limit for search endpoint (requests per hour)

# Google Analytics
GOOGLE_ANALYTICS_ID = os.getenv("GOOGLE_ANALYTICS_ID")
